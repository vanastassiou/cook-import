#!/usr/bin/env python3

import argparse
import re
import sys

from recipe_scrapers import scrape_me, WebsiteNotImplementedError
from parse_ingredients import parse_ingredient

from utils import eprint, sub_lists, print_recipe, highlight_replacement_in_text

# List of single stop words used to remove from ingredient list. Prevents outputs like @onion @powder{1%tbsp}{1%tbsp}
single_stop_words={"and", "or", "for", "the", "of", "powder", "syrup", "pinch", "cheese", "ground", "powdered", "seeds"}

# List of small amount types to convert quantity from 0 to 1.
small_amount_words={"dash", "pinch", "sprinkle", "smidgen", "drop", "bunch"}

parser = argparse.ArgumentParser(
    description="Automatically extract recipes from online websites. With no arguments, scraped output defaults to console screen."
)

parser.add_argument(
    "-l",
    "--link",
    help="Specifies the link to the recipe to be scraped.")

parser.add_argument(
    "-f",
    "--file",
    help="Outputs scraped recipe data to a file in the current directory, automatically named after the recipe title.",
    action="store_true",
)

#TODO: Add user-specified filename positional parameter https://docs.python.org/3/library/argparse.html#name-or-flags
parser.add_argument(
    "-n",
    "--filename",
    help="Outputs scraped recipe data to specified filename and location.",
    action="store_true",
    dest="",
)

args = parser.parse_args()

with open(args.filename, 'w') as output_file:
    output_file.write("%s\n" % args.filename)

# Check if no arguments are passed
if len(sys.argv) == 1:
    parser.print_help()
    sys.exit()

# give the url as a string, it can be url from any site listed below
try:
    scraper = scrape_me(args.link)
except WebsiteNotImplementedError as e:
    print("The domain is currently not supported, %s. You can request adding this domain at https://github.com/hhursev/recipe-scrapers." % e.domain)
    sys.exit(1)
  
# Q: What if the recipe site I want to extract information from is not listed below?
# A: You can give it a try with the wild_mode option! If there is Schema/Recipe available it will work just fine.
# scraper = scrape_me('https://www.feastingathome.com/tomato-risotto/', wild_mode=True)

title = scraper.title()
image = scraper.image()
total_time = scraper.total_time()

eprint("Title:", title)
eprint("Image:", image)

instructions = scraper.instructions()
# Remove those pesky punctuation
ingredients_list = [
    parse_ingredient(re.sub(r"\.", "", ingredient))
    for ingredient in scraper.ingredients()
]

# Convert the timers
time_regex_match_str = r"(\d+|\d+\.\d+|\d+-\d+|\d+ to \d+) (min(?:utes)?|hours?|days?)"
instructions = re.sub(time_regex_match_str, r"~{\1%\2}", instructions)

for combined_ingredient in ingredients_list:

    quantity = combined_ingredient.quantity
    unit = combined_ingredient.unit

    # Remove decimal places of whole numbers, such as 1.0 to 1
    if quantity % 1 == 0:
        quantity = int(quantity)

    # Truncate repeating decimals such as .333333
    if len(str(quantity)) > 5:
        quantity = f"{quantity:.2f}"

    # Unit is a small amount word and quantity is 0
    if ((unit in small_amount_words) and (quantity==0)):
        quantity = 1

    # remove extra characters aka ')'
    ingredient_fixed = re.sub(r" ?\)", "", combined_ingredient.name)

    # Create sublists for word matches
    # Idea is to greedly match as many words as possible
    ing_list = sub_lists(ingredient_fixed.split(" "))

    # Filter out empty sublist
    ing_list = list(filter(lambda x: len(x) > 0, ing_list))

    # Remove single stop words
    if len(ing_list) > 1:
        ing_list = list(
            filter(lambda x: x[0] not in single_stop_words, ing_list)
        )

    # Now generate regex string to  match
    ing_list = sorted(ing_list, reverse=True, key=lambda x: len(x))
    ing_regex_match_str = "|".join(list(map(lambda x: fr'\b{" ".join(x)}\b', ing_list)))
    ing_regex_match_str = "(?:[^@])(" + ing_regex_match_str + ")"
    # regex match the text
    match_obj = re.search(ing_regex_match_str, instructions, flags=re.I)

    eprint("")
    eprint(
        "✅" if match_obj is not None else "❌",
        f"@{combined_ingredient.name}{{{quantity}%{unit}}}" if unit != "" else (f"@{combined_ingredient.name}{{}}" if quantity==0 else f"@{combined_ingredient.name}{{{quantity}}}")
    )

    # If no match skip ingredient
    if match_obj is None:
        continue

    match_start = match_obj.start(1)
    match_end = match_obj.end(1)

    highlight_replacement_in_text(instructions, match_start, match_end)
    ing_replacement = f"@{match_obj[1]}{{{quantity}%{unit}}}" if unit != "" else (f"@{match_obj[1]}{{}}" if quantity==0 else f"@{match_obj[1]}{{{quantity}}}")
    instructions = (
        instructions[0:match_start]
        + ing_replacement
        + instructions[match_obj.end() :]
    )

instructions = instructions.replace("\n", "\n\n")

print_recipe(title, args.link, total_time, image, instructions, to_file=args.file)
